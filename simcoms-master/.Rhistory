postT<-array(dim=c(ns,ns,nchains*nsamples))
for(i in 1:dim(postOmega)[3]){
postR[,,i]<-stats::cov2cor(postOmega[,,i])
postT[,,i]<- -stats::cov2cor(solve(postOmega[,,i]+diag(ns)))
}
postRMean = apply(postR,c(1,2),mean)
postRUp=apply(postR,c(1,2),quantile,0.95)
postRLo=apply(postR,c(1,2),quantile,0.05)
postTMean = apply(postT,c(1,2),mean)
postTUp=apply(postT,c(1,2),quantile,0.95)
postTLo=apply(postT,c(1,2),quantile,0.05)
Toplot_R<-postRMean*(!(postRUp>0 & postRLo<0))
Toplot_T<-postTMean*(!(postTUp>0 & postTLo<0))
return(list(Rho_mean=postRMean,Rho_sign=Toplot_R, Tau=postTMean,Tau_sign=Toplot_T))
}
R_list<-lapply(hmsc_files_list,hm_inter)
Tau_list<-lapply(R_list, function(x) list(Rho_mean=x$Tau,Rho_sign=x$Tau_sign))
hmsc_cor<-mean_cor_other(R_list,lab="HMSC")
hmsc_pcor<-mean_cor_other(Tau_list,lab="HMSC")
hmsc_metrics<-mapply(metrics_hmsc,R_list,fac_inter,comp_inter,SIMPLIFY = FALSE)
R_list
lapply(R_list, function(x) nrow(x$Rho))
lapply(R_list, function(x) nrow(x$Rho_sign))
R_list
R_sign_list<- lapply(R_list, function(x) Rho_sign=x$Rho_sign)
hmsc_metrics<-mapply(metrics_hmsc,R_sign_list,fac_inter,comp_inter,SIMPLIFY = FALSE)
hmsc_metrics
hmsc_metrics<-mapply(metrics_hmsc,R_sign_list,fac_inter,comp_inter,SIMPLIFY = FALSE)
expandSigma_rmd <- function(sigma, S){
ss <- diag(S)
ss[lower.tri(ss,diag=T)] <- sigma
ss[upper.tri(ss)] <- t(ss)[upper.tri(ss)]
ss
}
convert_to_m<-function(ar){
d <-floor((sqrt(length(ar)*8+1)-1)/2)
C <- matrix(0,d,d)
i.lwr <- which(lower.tri(C, diag = TRUE), arr.ind=TRUE)
C[i.lwr] <- ar
C<-makeSymm(C)
return(t(C))
}
gjam_Rho<-function(name){
gj_mod<-load_object(name)
burn<-gj_mod$m1$modelList$burnin
J<-ncol(gj_mod$m1$inputs$y)
gjam_bs<- mcmc.list(mcmc(gj_mod$m1$chains$bgibbsUn[-(1:burn),]),mcmc(gj_mod$m2$chains$bgibbsUn[-(1:burn),]))
gjam_sigma<- mcmc.list(mcmc(gj_mod$m1$chains$sgibbs[-(1:burn),]),mcmc(gj_mod$m2$chains$sgibbs[-(1:burn),]))
gjam_mods_2sgibbs<-abind(gj_mod$m1$chains$sgibbs,gj_mod$m2$chains$sgibbs, along = 3)
postH<- apply(gjam_mods_2sgibbs, 2, quantile,0.95)
postL<-apply(gjam_mods_2sgibbs, 2, quantile,0.05)
post_mean<-apply(gjam_mods_2sgibbs, 2, mean)
pH<-convert_to_m(postH)
pL<-convert_to_m(postL)
post_mean_s<-convert_to_m(post_mean)
S_mean<-cov2cor(post_mean_s)
R_sign<-cov2cor(post_mean_s)*(!(pH>0 & pL<0))
sgibbs<-abind(gj_mod$m1$chains$sgibbs[-(1:burn),],gj_mod$m2$chains$sgibbs[-(1:burn),],along=1)
tau<-array(NA,dim=c(J,J,dim(sgibbs)[1]))
for(j in 1:dim(sgibbs)[1]){
ss <- expandSigma_rmd(sgibbs[j,], S = J)
si <- solve(ss)
tau[,,j] <- -cov2cor(si)
}
tau_mean<-apply(tau,c(1,2), mean)
tau_HI<-apply(tau,c(1,2),quantile,0.95)
tau_LO<-apply(tau,c(1,2),quantile,0.05)
Tau_sign<-tau_mean*(!(tau_HI>0 & tau_LO<0))
return(list(Rho_mean=S_mean,Rho_sign=R_sign, Tau=tau_mean,Tau_sign=Tau_sign))
}
gjam_list_R<- lapply(gjam_files_list,gjam_Rho)
names(gjam_list_R)<- sim_names
Tau_list_gjam<-lapply(gjam_list_R, function(x) list(Rho_mean=x$Tau,Rho_sign=x$Tau_sign))
gjam_mean_cor<-mean_cor_other(gjam_list_R,lab="GJAM")
gjam_mean_cor_p<-mean_cor_other(Tau_list_gjam,lab="GJAM")
makeSymm <- function(m) {
m[upper.tri(m)] <- t(m)[upper.tri(m)]
return(m)
}
gjam_dr_Rho<-function(name){
gjam_dr_mods<-load_object(name)
mod_gjam_red_1<-gjam_dr_mods$m1
mod_gjam_red_2<-gjam_dr_mods$m2
ns<-ncol(mod_gjam_red_1$inputs$y)
ng<-mod_gjam_red_2$modelList$ng
burnin<-mod_gjam_red_2$modelList$burnin
gjam_sigma<- mcmc.list(mcmc(mod_gjam_red_1$chains$sgibbs[-(1:burnin),]),mcmc(mod_gjam_red_2$chains$sgibbs[-(1:burnin),]))
sgibbs<-abind(mod_gjam_red_1$chains$sgibbs[-(1:burnin),],mod_gjam_red_2$chains$sgibbs[-(1:burnin),],along=1)
sigErrGibbs<-abind(mod_gjam_red_1$chains$sigErrGibbs[-(1:burnin)],mod_gjam_red_2$chains$sigErrGibbs[-(1:burnin)],along=1)
kgibbs<-abind(mod_gjam_red_1$chains$kgibbs[-(1:burnin),],mod_gjam_red_2$chains$kgibbs[-(1:burnin),],along=1)
sigma<-invsigma<-array(NA,dim=c(ns,ns,2*(ng-burnin)))
N<-mod_gjam_red_1$modelList$reductList$N
r<-mod_gjam_red_1$modelList$reductList$r
N_dim<-2*(ng-burnin)
for(j in 1:N_dim){
Z  <- matrix(sgibbs[j,],N,r)
sigma[,,j] <- .expandSigma(sigErrGibbs[j], ns, Z = Z, kgibbs[j,], REDUCT = T) #sigma
invsigma[,,j] <- invWbyRcpp(sigErrGibbs[j], Z[kgibbs[j,],]) #inverse sigma
}
sigma_mean<-apply(sigma,c(1,2),mean)
sigma_q05<-apply(sigma,c(1,2),quantile,0.05)
sigma_q95<-apply(sigma,c(1,2),quantile,0.95)
S_mean<-cov2cor(sigma_mean)
Sigma_sign<--cov2cor(sigma_mean*(!(sigma_q95>0 & sigma_q05<0)))
invsigma_mean<-apply(invsigma,c(1,2),mean)
invsigma_q05<-apply(invsigma,c(1,2),quantile,0.05)
invsigma_q95<-apply(invsigma,c(1,2),quantile,0.95)
INVSigma_sign<--cov2cor(sigma_mean*(!(invsigma_q95>0 & invsigma_q05<0)))
return(list(Rho_mean=S_mean,Rho_sign=Sigma_sign, Tau=invsigma_mean,Tau_sign=INVSigma_sign))
}
gjam_dr_list_R<- lapply(gjam_dr_files_list,gjam_dr_Rho)
names(gjam_dr_list_R)<- sim_names
Tau_list_gj_dr<-lapply(gjam_dr_list_R, function(x) list(Rho_mean=x$Tau,Rho_sign=x$Tau_sign))
gjam_dr_mean_cor<-mean_cor_other(gjam_dr_list_R,lab="DR-GJAM")
#
gjam_dr_mean_cor_p<-mean_cor_other(Tau_list_gj_dr,lab="DR-GJAM")
total_mean_cor<- rbind(mean_corr_val,hmsc_cor,gjam_mean_cor,gjam_dr_mean_cor)
#pdf("plot_mean_corr.pdf")
#png("plot_mean_corr.png")
m<- ggplot(total_mean_cor) +
aes(factor(nsp), rho, fill = interaction) +
geom_hline(yintercept = 0) +
geom_boxplot(
outlier.size = .2, size = .1, position = position_dodge(preserve = "single")
) +
scale_fill_manual(values = c("grey", "blue", "red")) +
facet_grid(rho_type ~ type + density) +
xlab("Number of species") +
ylab("Correlation") +
theme_bw() +
theme(legend.position = "top")
m
gjam_mean_cor<-mean_cor_other(gjam_list_R,lab="GJAM")
gjam_Rho<-function(name){
gj_mod<-load_object(name)
burn<-gj_mod$m1$modelList$burnin
J<-ncol(gj_mod$m1$inputs$y)
gjam_bs<- mcmc.list(mcmc(gj_mod$m1$chains$bgibbsUn[-(1:burn),]),mcmc(gj_mod$m2$chains$bgibbsUn[-(1:burn),]))
gjam_sigma<- mcmc.list(mcmc(gj_mod$m1$chains$sgibbs[-(1:burn),]),mcmc(gj_mod$m2$chains$sgibbs[-(1:burn),]))
gjam_mods_2sgibbs<-abind(gj_mod$m1$chains$sgibbs,gj_mod$m2$chains$sgibbs, along = 3)
postH<- apply(gjam_mods_2sgibbs, 2, quantile,0.95)
postL<-apply(gjam_mods_2sgibbs, 2, quantile,0.05)
post_mean<-apply(gjam_mods_2sgibbs, 2, mean)
pH<-convert_to_m(postH)
pL<-convert_to_m(postL)
post_mean_s<-convert_to_m(post_mean)
S_mean<-cov2cor(post_mean_s)
R_sign<-cov2cor(post_mean_s)*(!(pH>0 & pL<0))
sgibbs<-abind(gj_mod$m1$chains$sgibbs[-(1:burn),],gj_mod$m2$chains$sgibbs[-(1:burn),],along=1)
tau<-array(NA,dim=c(J,J,dim(sgibbs)[1]))
for(j in 1:dim(sgibbs)[1]){
ss <- expandSigma_rmd(sgibbs[j,], S = J)
si <- solve(ss)
tau[,,j] <- -cov2cor(si)
}
tau_mean<-apply(tau,c(1,2), mean)
tau_HI<-apply(tau,c(1,2),quantile,0.95)
tau_LO<-apply(tau,c(1,2),quantile,0.05)
Tau_sign<-tau_mean*(!(tau_HI>0 & tau_LO<0))
return(list(Rho_mean=S_mean,Rho_sign=R_sign, Tau=tau_mean,Tau_sign=Tau_sign))
}
gjam_list_R<- lapply(gjam_files_list,gjam_Rho)
names(gjam_list_R)<- sim_names
Tau_list_gjam<-lapply(gjam_list_R, function(x) list(Rho_mean=x$Tau,Rho_sign=x$Tau_sign))
gjam_mean_cor<-mean_cor_other(gjam_list_R,lab="GJAM")
gjam_mean_cor_p<-mean_cor_other(Tau_list_gjam,lab="GJAM")
gjam_dr_Rho<-function(name){
gjam_dr_mods<-load_object(name)
mod_gjam_red_1<-gjam_dr_mods$m1
mod_gjam_red_2<-gjam_dr_mods$m2
ns<-ncol(mod_gjam_red_1$inputs$y)
ng<-mod_gjam_red_2$modelList$ng
burnin<-mod_gjam_red_2$modelList$burnin
gjam_sigma<- mcmc.list(mcmc(mod_gjam_red_1$chains$sgibbs[-(1:burnin),]),mcmc(mod_gjam_red_2$chains$sgibbs[-(1:burnin),]))
sgibbs<-abind(mod_gjam_red_1$chains$sgibbs[-(1:burnin),],mod_gjam_red_2$chains$sgibbs[-(1:burnin),],along=1)
sigErrGibbs<-abind(mod_gjam_red_1$chains$sigErrGibbs[-(1:burnin)],mod_gjam_red_2$chains$sigErrGibbs[-(1:burnin)],along=1)
kgibbs<-abind(mod_gjam_red_1$chains$kgibbs[-(1:burnin),],mod_gjam_red_2$chains$kgibbs[-(1:burnin),],along=1)
sigma<-invsigma<-array(NA,dim=c(ns,ns,2*(ng-burnin)))
N<-mod_gjam_red_1$modelList$reductList$N
r<-mod_gjam_red_1$modelList$reductList$r
N_dim<-2*(ng-burnin)
for(j in 1:N_dim){
Z  <- matrix(sgibbs[j,],N,r)
sigma[,,j] <- .expandSigma(sigErrGibbs[j], ns, Z = Z, kgibbs[j,], REDUCT = T) #sigma
invsigma[,,j] <- invWbyRcpp(sigErrGibbs[j], Z[kgibbs[j,],]) #inverse sigma
}
sigma_mean<-apply(sigma,c(1,2),mean)
sigma_q05<-apply(sigma,c(1,2),quantile,0.05)
sigma_q95<-apply(sigma,c(1,2),quantile,0.95)
S_mean<-cov2cor(sigma_mean)
Sigma_sign<--cov2cor(sigma_mean*(!(sigma_q95>0 & sigma_q05<0)))
invsigma_mean<-apply(invsigma,c(1,2),mean)
invsigma_q05<-apply(invsigma,c(1,2),quantile,0.05)
invsigma_q95<-apply(invsigma,c(1,2),quantile,0.95)
INVSigma_sign<--cov2cor(sigma_mean*(!(invsigma_q95>0 & invsigma_q05<0)))
return(list(Rho_mean=S_mean,Rho_sign=Sigma_sign, Tau=invsigma_mean,Tau_sign=INVSigma_sign))
}
gjam_dr_list_R<- lapply(gjam_dr_files_list,gjam_dr_Rho)
names(gjam_dr_list_R)<- sim_names
Tau_list_gj_dr<-lapply(gjam_dr_list_R, function(x) list(Rho_mean=x$Tau,Rho_sign=x$Tau_sign))
gjam_dr_mean_cor<-mean_cor_other(gjam_dr_list_R,lab="DR-GJAM")
#
gjam_dr_mean_cor_p<-mean_cor_other(Tau_list_gj_dr,lab="DR-GJAM")
total_mean_cor<- rbind(mean_corr_val,hmsc_cor,gjam_mean_cor,gjam_dr_mean_cor)
#pdf("plot_mean_corr.pdf")
#png("plot_mean_corr.png")
m<- ggplot(total_mean_cor) +
aes(factor(nsp), rho, fill = interaction) +
geom_hline(yintercept = 0) +
geom_boxplot(
outlier.size = .2, size = .1, position = position_dodge(preserve = "single")
) +
scale_fill_manual(values = c("grey", "blue", "red")) +
facet_grid(rho_type ~ type + density) +
xlab("Number of species") +
ylab("Correlation") +
theme_bw() +
theme(legend.position = "top")
m
total_mean_part_cor<- rbind(hmsc_pcor,gjam_mean_cor_p,gjam_dr_mean_cor_p)
m<- ggplot(total_mean_part_cor) +
aes(factor(nsp), rho, fill = interaction) +
geom_hline(yintercept = 0) +
geom_boxplot(
outlier.size = .2, size = .1, position = position_dodge(preserve = "single")
) +
scale_fill_manual(values = c("grey", "blue", "red")) +
facet_grid(rho_type ~ type + density) +
xlab("Number of species") +
ylab("Partial correlation") +
theme_bw() +
theme(legend.position = "top")
m
hmsc_pcor
total_mean_part_cor<- rbind(hmsc_pcor,gjam_mean_cor_p,gjam_dr_mean_cor_p)
all_part<-list("g_metric_e5"=g_metric_e5_p,"g_dr_metric_e5"=g_dr_metric_e5_p,"h_metric_e5"=h_metric_e5_p,
"g_metric_e10"=g_metric_e10_p,"g_dr_metric_e10"=g_dr_metric_e10_p,"h_metric_e10"=h_metric_e10_p,
"g_metric_e20"=g_metric_e20_p,"g_dr_metric_e20"=g_dr_metric_e20_p,"h_metric_e20"=h_metric_e20_p,
"h_metric_facDense5"=h_metric_facDense5_p,"g_metric_facDense5"=g_metric_facDense5_p,"g_dr_facDense5"=g_dr_metric_facDense5_p,
"h_metric_facDense10"=h_metric_facDense10_p,"g_metric_facDense10"=g_metric_facDense10_p,"g_dr_metric_facDense10"=g_dr_metric_facDense10_p,
"h_metric_facDense20"=h_metric_facDense20_p,"g_metric_facDense20"=g_metric_facDense20_p,"g_dr_metric_facDense20"=g_dr_metric_facDense20_p,
"h_metric_facSparse5"=h_metric_facSparse5_p,"g_metric_facSparse5"=g_metric_facSparse5_p,"g_dr_metric_facSparse5"=g_dr_metric_facSparse5_p,
"h_metric_facSparse10"=h_metric_facSparse10_p,"g_metric_facSparse10"=g_metric_facSparse10_p,"g_dr_metric_facSparse10"=g_dr_metric_facSparse10_p,
"h_metric_facSparse20"=h_metric_facSparse20_p,"g_metric_facSparse20"=g_metric_facSparse20_p,"g_dr_metric_facSparse20"=g_dr_metric_facSparse20_p,
"h_metric_compDense5"=h_metric_compDense5_p,"g_metric_compDense5"=g_metric_compDense5_p,"g_dr_metric_compDense5"=g_dr_metric_compDense5_p,
"h_metric_compDense10"=h_metric_compDense10_p,"g_metric_compDense10"=g_metric_compDense10_p,"g_dr_metric_compDense10"=g_dr_metric_compDense10_p,
"h_metric_compDense20"=h_metric_compDense20_p,"g_metric_compDense20"=g_metric_compDense20_p,"g_dr_metric_compDense20"=g_dr_metric_compDense20_p,
"h_metric_compSparse5"=h_metric_compSparse5_p,"g_metric_compSparse5"=g_metric_compSparse5_p,"g_dr_metric_compSparse5"=g_dr_metric_compSparse5_p,
"h_metric_compSparse10"=h_metric_compSparse10_p,"g_metric_compSparse10"=g_metric_compSparse10_p,"g_dr_metric_compSparse10"=g_dr_metric_compSparse10_p,
"h_metric_compSparse20"=h_metric_compSparse20_p,"g_metric_compSparse20"=g_metric_compSparse20_p,"g_dr_metric_compSparse20"=g_dr_metric_compSparse20_p,
"g_metric_faccompSparseSp5"= g_metric_FacCompSparse5_p,"h_metric_faccompSparseSp5"=h_metric_FacCompSparse5_p, "g_dr_metric_FacCompSparse5"=g_dr_metric_FacCompSparse5_p,
"g_metric_faccompSparseSp10"= g_metric_FacCompSparse10_p,"h_metric_faccompSparseSp10"=h_metric_FacCompSparse10_p,"g_dr_metric_FacCompSparse10"=g_dr_metric_FacCompSparse10_p,
"g_metric_faccompSparseSp20"= g_metric_FacCompSparse20_p,"h_metric_faccompSparseSp20"=h_metric_FacCompSparse20_p,"g_dr_metric_FacCompSparse20"=g_dr_metric_FacCompSparse20_p,
"g_metric_faccompDenseSp5"= g_metric_FacCompDense5_p,"h_metric_faccompDenseSp5"=h_metric_FacCompDense5_p, "g_dr_metric_FacCompDense5"=g_dr_metric_FacCompDense5_p,
"g_metric_faccompDenseSp10"= g_metric_FacCompDense10_p,"h_metric_faccompDenseSp10"=h_metric_FacCompDense10_p,"g_dr_metric_FacCompDense10"=g_dr_metric_FacCompDense10_p,
"g_metric_faccompDenseSp20"= g_metric_FacCompDense20_p,"h_metric_faccompDenseSp20"=h_metric_FacCompDense20_p,"g_dr_metric_FacCompDense20"=g_dr_metric_FacCompDense20_p
)
for(i in 1:length(names(all_part))){
if(!is.null(all_part[[i]]$success_env)) table[i,"success_env"]<-all_part[[i]]$success_env
if(!is.null(all_part[[i]]$success_comp)) table[i,"success_comp"]<-all_part[[i]]$success_comp
if(!is.null(all_part[[i]]$success_fac)) table[i,"success_fac"]<-all_part[[i]]$success_fac
if(length(grep("5",names(all_part)[i]))>0) table[i,"n_sp"]<-5
if(length(grep("10",names(all_part)[i]))>0) table[i,"n_sp"]<-10
if(length(grep("20",names(all_part)[i]))>0) table[i,"n_sp"]<-20
if(length(grep("fac",names(all_part)[i]))>0){ table[i,"Facilitation"]<-"facilitation"}#else{table[i,"facilition"]<-NULL}
if(length(grep("comp",names(all_part)[i]))>0){ table[i,"Competition"]<-"competition"}#else{table[i,"competition"]<-NULL}
#if(!(length(grep("comp",names(all_part)[i]))>0) | length(grep("fac",names(all_part)[i]))>0) {table[i,"Comp_fac"]<-"comp_fac"}else{table[i,"Comp_fac"]<-NULL}
if(length(grep("Dense",names(all_part)[i]))>0){ table[i,"sparsity"]<-"dense"}else{table[i,"sparsity"]<-"sparse"}
if(length(grep("j_",names(all_part)[i]))>0) table[i,"model"]<-"CM"
if(length(grep("g_m",names(all_part)[i]))>0) table[i,"model"]<-"GJAM"
if(length(grep("g_dr",names(all_part)[i]))>0) table[i,"model"]<-"DR-GJAM"
if(length(grep("h_",names(all_part)[i]))>0) table[i,"model"]<-"HMSC"
}
table_comp<-table[which(!is.na(table$success_comp)),]
table_fac<-table[which(!is.na(table$success_fac)),]
tc<-cbind(table_comp$success_comp,table_comp$model,rep("All",nrow(table_comp)),rep("Int",nrow(table_comp)))
tc<-rbind(tc,cbind(table_comp[which(table_comp$n_sp==5),"success_comp"],table_comp[which(table_comp$n_sp==5),"model"],rep("5",sum(table_comp$n_sp==5)),rep("Int",sum(table_comp$n_sp==5))))
tc<-rbind(tc,cbind(table_comp[which(table_comp$n_sp==10),"success_comp"],table_comp[which(table_comp$n_sp==10),"model"],rep("10",sum(table_comp$n_sp==10)),rep("Int",sum(table_comp$n_sp==10))))
tc<-rbind(tc,cbind(table_comp[which(table_comp$n_sp==20),"success_comp"],table_comp[which(table_comp$n_sp==20),"model"],rep("20",sum(table_comp$n_sp==20)),rep("Int",sum(table_comp$n_sp==20))))
tc<-rbind(tc,cbind(table_comp[which(table_comp$sparsity=="dense"),"success_comp"],table_comp[which(table_comp$sparsity=="dense"),"model"],rep("dense",sum(table_comp$sparsity=="dense")),rep("Int",sum(table_comp$sparsity=="dense"))))
tc<-rbind(tc,cbind(table_comp[which(table_comp$sparsity=="sparse"),"success_comp"],table_comp[which(table_comp$sparsity=="sparse"),"model"],rep("sparse",sum(table_comp$sparsity=="sparse")),rep("Int",sum(table_comp$sparsity=="sparse"))))
tc<-rbind(tc,cbind(table_comp$success_env,table_comp$model,rep("All_env",nrow(table_comp)),rep("Env",nrow(table_comp))))
tc<-rbind(tc,cbind(table_comp[which(table_comp$n_sp==5),"success_env"],table_comp[which(table_comp$n_sp==5),"model"],rep("5_env",sum(table_comp$n_sp==5)),rep("Env",sum(table_comp$n_sp==5))))
tc<-rbind(tc,cbind(table_comp[which(table_comp$n_sp==10),"success_env"],table_comp[which(table_comp$n_sp==10),"model"],rep("10_env",sum(table_comp$n_sp==10)),rep("Env",sum(table_comp$n_sp==10))))
tc<-rbind(tc,cbind(table_comp[which(table_comp$n_sp==20),"success_env"],table_comp[which(table_comp$n_sp==20),"model"],rep("20_env",sum(table_comp$n_sp==20)),rep("Env",sum(table_comp$n_sp==20))))
tc<-data.frame("success"=as.numeric(tc[,1]),"model"=tc[,2],"fac"=tc[,3],"int"=rep("Competition",nrow(tc)),"col"=tc[,4])
tf<-cbind(table_fac$success_fac,table_fac$model,rep("All",nrow(table_fac)),rep("Int",nrow(table_fac)))
tf<-rbind(tf,cbind(table_fac[which(table_fac$n_sp==5),"success_fac"],table_fac[which(table_fac$n_sp==5),"model"],rep("5",sum(table_fac$n_sp==5)),rep("Int",sum(table_fac$n_sp==5))))
tf<-rbind(tf,cbind(table_fac[which(table_fac$n_sp==10),"success_fac"],table_fac[which(table_fac$n_sp==10),"model"],rep("10",sum(table_fac$n_sp==10)),rep("Int",sum(table_fac$n_sp==10))))
tf<-rbind(tf,cbind(table_fac[which(table_fac$n_sp==20),"success_fac"],table_fac[which(table_fac$n_sp==20),"model"],rep("20",sum(table_fac$n_sp==20)),rep("Int",sum(table_fac$n_sp==20))))
tf<-rbind(tf,cbind(table_fac[which(table_fac$sparsity=="dense"),"success_fac"],table_fac[which(table_fac$sparsity=="dense"),"model"],rep("dense",sum(table_fac$sparsity=="dense")),rep("Int",sum(table_fac$sparsity=="dense"))))
tf<-rbind(tf,cbind(table_fac[which(table_fac$sparsity=="sparse"),"success_fac"],table_fac[which(table_fac$sparsity=="sparse"),"model"],rep("sparse",sum(table_fac$sparsity=="sparse")),rep("Int",sum(table_fac$sparsity=="sparse"))))
tf<-rbind(tf,cbind(table_fac$success_env,table_fac$model,rep("All_env",nrow(table_fac)),rep("Env",nrow(table_fac))))
tf<-rbind(tf,cbind(table_fac[which(table_fac$n_sp==5),"success_env"],table_fac[which(table_fac$n_sp==5),"model"],rep("5_env",sum(table_fac$n_sp==5)),rep("Env",sum(table_fac$n_sp==5))))
tf<-rbind(tf,cbind(table_fac[which(table_fac$n_sp==10),"success_env"],table_fac[which(table_fac$n_sp==10),"model"],rep("10_env",sum(table_fac$n_sp==10)),rep("Env",sum(table_fac$n_sp==10))))
tf<-rbind(tf,cbind(table_fac[which(table_fac$n_sp==20),"success_env"],table_fac[which(table_fac$n_sp==20),"model"],rep("20_env",sum(table_fac$n_sp==20)),rep("Env",sum(table_fac$n_sp==20))))
tf<-data.frame("success"=as.numeric(tf[,1]),"model"=tf[,2],"fac"=tf[,3],"int"=rep("Facilitation",nrow(tf)),"col"=tf[,4])
table<-rbind(tf,tc)
p<-ggplot(data=table)+geom_boxplot(aes(y=as.numeric(success),x=as.factor(fac),fill=as.factor(col)))+
scale_x_discrete(name="Parameters", breaks=c("All","5","10","20","dense","sparse","All_env","5_env","10_env","20_env"),
labels=c("All","5","10","20","dense","sparse","All","5","10","20"),limits=c("All","5","10","20","dense","sparse","All_env","5_env","10_env","20_env"))+
scale_y_continuous(name="% success")+
scale_fill_discrete(name = "Success in retrieving", labels = c("Sensibility (non int.)","Sensitivity (int.)"))+theme_bw()+theme(axis.text.x = element_text(angle = 45, hjust = 0.5),legend.position="top",plot.title = element_text(hjust = 0.5))+
facet_grid( int~model , scales="free") +ggtitle("Pairs indentification by partial correlation")
p
all_part<-list("g_metric_e5"=g_metric_e5_p,"g_dr_metric_e5"=g_dr_metric_e5_p,"h_metric_e5"=h_metric_e5_p,
"g_metric_e10"=g_metric_e10_p,"g_dr_metric_e10"=g_dr_metric_e10_p,"h_metric_e10"=h_metric_e10_p,
"g_metric_e20"=g_metric_e20_p,"g_dr_metric_e20"=g_dr_metric_e20_p,"h_metric_e20"=h_metric_e20_p,
"h_metric_facDense5"=h_metric_facDense5_p,"g_metric_facDense5"=g_metric_facDense5_p,"g_dr_facDense5"=g_dr_metric_facDense5_p,
"h_metric_facDense10"=h_metric_facDense10_p,"g_metric_facDense10"=g_metric_facDense10_p,"g_dr_metric_facDense10"=g_dr_metric_facDense10_p,
"h_metric_facDense20"=h_metric_facDense20_p,"g_metric_facDense20"=g_metric_facDense20_p,"g_dr_metric_facDense20"=g_dr_metric_facDense20_p,
"h_metric_facSparse5"=h_metric_facSparse5_p,"g_metric_facSparse5"=g_metric_facSparse5_p,"g_dr_metric_facSparse5"=g_dr_metric_facSparse5_p,
"h_metric_facSparse10"=h_metric_facSparse10_p,"g_metric_facSparse10"=g_metric_facSparse10_p,"g_dr_metric_facSparse10"=g_dr_metric_facSparse10_p,
"h_metric_facSparse20"=h_metric_facSparse20_p,"g_metric_facSparse20"=g_metric_facSparse20_p,"g_dr_metric_facSparse20"=g_dr_metric_facSparse20_p,
"h_metric_compDense5"=h_metric_compDense5_p,"g_metric_compDense5"=g_metric_compDense5_p,"g_dr_metric_compDense5"=g_dr_metric_compDense5_p,
"h_metric_compDense10"=h_metric_compDense10_p,"g_metric_compDense10"=g_metric_compDense10_p,"g_dr_metric_compDense10"=g_dr_metric_compDense10_p,
"h_metric_compDense20"=h_metric_compDense20_p,"g_metric_compDense20"=g_metric_compDense20_p,"g_dr_metric_compDense20"=g_dr_metric_compDense20_p,
"h_metric_compSparse5"=h_metric_compSparse5_p,"g_metric_compSparse5"=g_metric_compSparse5_p,"g_dr_metric_compSparse5"=g_dr_metric_compSparse5_p,
"h_metric_compSparse10"=h_metric_compSparse10_p,"g_metric_compSparse10"=g_metric_compSparse10_p,"g_dr_metric_compSparse10"=g_dr_metric_compSparse10_p,
"h_metric_compSparse20"=h_metric_compSparse20_p,"g_metric_compSparse20"=g_metric_compSparse20_p,"g_dr_metric_compSparse20"=g_dr_metric_compSparse20_p,
"g_metric_faccompSparseSp5"= g_metric_FacCompSparse5_p,"h_metric_faccompSparseSp5"=h_metric_FacCompSparse5_p, "g_dr_metric_FacCompSparse5"=g_dr_metric_FacCompSparse5_p,
"g_metric_faccompSparseSp10"= g_metric_FacCompSparse10_p,"h_metric_faccompSparseSp10"=h_metric_FacCompSparse10_p,"g_dr_metric_FacCompSparse10"=g_dr_metric_FacCompSparse10_p,
"g_metric_faccompSparseSp20"= g_metric_FacCompSparse20_p,"h_metric_faccompSparseSp20"=h_metric_FacCompSparse20_p,"g_dr_metric_FacCompSparse20"=g_dr_metric_FacCompSparse20_p,
"g_metric_faccompDenseSp5"= g_metric_FacCompDense5_p,"h_metric_faccompDenseSp5"=h_metric_FacCompDense5_p, "g_dr_metric_FacCompDense5"=g_dr_metric_FacCompDense5_p,
"g_metric_faccompDenseSp10"= g_metric_FacCompDense10_p,"h_metric_faccompDenseSp10"=h_metric_FacCompDense10_p,"g_dr_metric_FacCompDense10"=g_dr_metric_FacCompDense10_p,
"g_metric_faccompDenseSp20"= g_metric_FacCompDense20_p,"h_metric_faccompDenseSp20"=h_metric_FacCompDense20_p,"g_dr_metric_FacCompDense20"=g_dr_metric_FacCompDense20_p
)
mat_measure<- function(Mat_list){
A<- Mat_list$Rho
B<- Mat_list$Tau
n<- dim(A)
coef<- n*(n-1)
A[A < -0.01] <- -1
B[B < -0.01] <- -1
A[A > 0.01] <- 1
B[B > 0.01] <- 1
diag(A)<-0
diag(B)<-0
M<- 0.5* abs(A-B)
val<- sum(M)/coef
return(val)
}
R_Tau_list_gjam_sign<-lapply(gjam_list_R, function(x) list(Rho=x$Rho_sign,Tau=x$Tau_sign))
R_Tau_list_gjam_dr_sign<-lapply(gjam_dr_list_R, function(x) list(Rho=x$Rho_sign,Tau=x$Tau_sign))
R_Tau_list_hmsc_sign<-lapply(R_list, function(x) list(Rho=x$Rho_sign,Tau=x$Tau_sign))
R_Tau_list_jsdm_sign<-mapply(function(x,y) list(Rho=x$Rho_sign,Tau=y$Tau_sign),jsdm_rho_list,jsdm_tau_list,SIMPLIFY = FALSE )
difference_gjam<- lapply(R_Tau_list_gjam_sign,mat_measure)
difference_gjam_dr<- lapply(R_Tau_list_gjam_dr_sign,mat_measure)
difference_hmsc<- lapply(R_Tau_list_hmsc_sign,mat_measure)
difference_jsdm<- lapply(R_Tau_list_jsdm_sign,mat_measure)
difference_gjam_df<- as.data.frame(unlist(difference_gjam))
colnames(difference_gjam_df)<-c("value")
difference_gjam_df$model<-"GJAM"
difference_gjam_dr_df<- as.data.frame(unlist(difference_gjam_dr))
colnames(difference_gjam_dr_df)<-c("value")
difference_gjam_dr_df$model<- "DR-GJAM"
difference_hmsc_df<- as.data.frame(unlist(difference_hmsc))
colnames(difference_hmsc_df)<-c("value")
difference_hmsc_df$model<- "HMSC"
difference_jsdm_df<- as.data.frame(unlist(difference_jsdm))
colnames(difference_jsdm_df)<-c("value")
difference_jsdm_df$model<- "CM"
tab_diff<- rbind(difference_gjam_df,difference_gjam_dr_df,difference_hmsc_df,difference_jsdm_df)
p<-ggplot(data=tab_diff)+geom_boxplot(aes(x=model, y=as.numeric(value),fill=as.factor(model)))+
theme_bw()+theme(axis.text.x = element_text( hjust = 0.5),legend.position=" ",plot.title = element_text(hjust = 0.5))+ scale_y_continuous(name="% of different pairs")+
ggtitle("Difference between correlation and partial correlation matrices")
p
#### Out of sample prediction
setwd("/Users/dariabystrova/Documents/GitHub/Ecology-models/simcoms-master")
load("new_sim_data.rds")
pdata<- new_sim_data$EnvEvenSp5
datab <- list(
Y = subset(data, select = -env),
X = cbind(1, scale(poly(data$env, 2))),
covx = cov(cbind(1, scale(poly(data$env, 2)))),
K = 3,
J = ncol(data) - 1,
n = nrow(data),
I = diag(ncol(data) - 1),
df = ncol(data)
)
gjam_predict_out<- function(datap, name){
mod<-load_object(name)
np<-200
xdata<- as.data.frame(scale(poly(datap$env, 2))[1:np,])
colnames(xdata)<- c("env", "env2")
newdata <- list(xdata = xdata, nsim=200)
predict<-  gjamPredict(mod$m1, newdata = newdata)
y_full    <- predict$sdList$yMu
for(i in 1:(ncol(datap)-1)) AUC_g<-auc(roc(y_full[,i],factor(datap[1:np,i])))
return(AUC_g)
}
gjam_AUC<-mapply(gjam_predict_out,new_sim_data, gjam_files_list,SIMPLIFY = TRUE)
gjam_AUC_df<- as.data.frame(gjam_AUC)
colnames(gjam_AUC_df)<- c("AUC_value")
gjam_AUC_df$model<- "GJAM"
gjam_dr_AUC<-mapply(gjam_predict_out,new_sim_data, gjam_dr_files_list,SIMPLIFY = TRUE)
gjam_dr_AUC_df<- as.data.frame(gjam_dr_AUC)
colnames(gjam_dr_AUC_df)<- c("AUC_value")
gjam_dr_AUC_df$model<- "DR-GJAM"
hmsc_predict_out<- function(datap, name){
np<-200
mod<-load_object(name)
X<-scale(poly(datap$env[1:np], 2))
colnames(X)<-c("env","env2")
XDataNew<-as.data.frame(X)
studyDesignNew = data.frame(sample = as.factor(1:np))
rLNew = HmscRandomLevel(units = studyDesignNew$sample)
predY = predict(mod, XData=XDataNew, studyDesign=studyDesignNew, ranLevels=list(sample = rLNew), expected=TRUE )
prY<- apply(simplify2array(predY), 1:2, mean)
for(i in 1:(ncol(datap)-1)) AUC_hmcs<-auc(roc(prY[,i],factor(datap[1:np,i])))
return(AUC_hmcs)
}
hmsc_AUC<-mapply(hmsc_predict_out,new_sim_data, hmsc_files_list,SIMPLIFY = TRUE)
hmsc_AUC_df<- as.data.frame(hmsc_AUC)
colnames(hmsc_AUC_df)<- c("AUC_value")
hmsc_AUC_df$model<- "HMSC"
jsdm_predict_out<- function(datap, name){
np<-200
S<- ncol(datap)-1
nsamples<-mod$mcmc.info$n.samples
xdata<- as.data.frame(cbind(1, scale(poly(datap$env, 2)))[1:np,])
colnames(xdata)<- c("inter","env", "env2")
mod<-load_object(name)
postBX<-array(dim=c(nsamples,np,S))
postW<-array(dim=c(nsamples,np,S))
for(i in 1:nsamples){
postBX[i,,]<- t(mod$sims.list$B[i, , ]%*%t(xdata))
postW[i,,]<- .rMVN(np, postBX[i,,], mod$sims.list$Rho[i,,])
}
predY_mean<-pnorm(apply(postW,2:3, mean))
for(i in 1:S) AUC_j<-auc(roc(predY_mean[,i],factor(datap[1:np,i])))
return(AUC_j)
}
jsdm_AUC<-mapply(jsdm_predict_out,new_sim_data, jsdm_files_list,SIMPLIFY = TRUE)
jsdm_AUC_df<- as.data.frame(jsdm_AUC)
colnames(jsdm_AUC_df)<- c("AUC_value")
jsdm_AUC_df$model<- "CM"
#datap<- new_sim_data$FacDenseSp10
#name=jsdm_files_list[[5]]
table_AUC<- rbind(hmsc_AUC_df,gjam_dr_AUC_df,gjam_AUC_df,jsdm_AUC_df)
for(i in 1:dim(table_AUC)[1]){
if(length(grep("Fac",rownames(table_AUC)[i]))>0){ table_AUC$Filtering[i]<-"Facilitation"}
if(length(grep("Comp",rownames(table_AUC)[i]))>0){ table_AUC$Filtering[i]<-"Competition"}
if(length(grep("Env",rownames(table_AUC)[i]))>0){ table_AUC$Filtering[i]<-"Environmental"}
if((length(grep("Fac",rownames(table_AUC)[i]))>0)&(length(grep("Comp",rownames(table_AUC)[i]))>0)){
table_AUC$Filtering[i]<-"Comp+Fac"
}
if(length(grep("Spar",rownames(table_AUC)[i]))>0){ table_AUC$Density[i]<-"Sparse"}
if(length(grep("Dense",rownames(table_AUC)[i]))>0){ table_AUC$Density[i]<-"Dense"}
if(length(grep("Env",rownames(table_AUC)[i]))>0){ table_AUC$Density[i]<-"Sparse"}
}
jsdm_AUC<-mapply(jsdm_predict_out,new_sim_data, jsdm_files_list,SIMPLIFY = TRUE)
jsdm_predict_out
new_sim_data
jsdm_files_list
jsdm_AUC<-mapply(jsdm_predict_out,new_sim_data, jsdm_files_list,SIMPLIFY = TRUE)
jsdm_predict_out<- function(datap, name){
np<-200
S<- ncol(datap)-1
nsamples<-mod$mcmc.info$n.samples
xdata<- as.data.frame(cbind(1, scale(poly(datap$env, 2)))[1:np,])
colnames(xdata)<- c("inter","env", "env2")
mod<-load_object(name)
postBX<-array(dim=c(nsamples,np,S))
postW<-array(dim=c(nsamples,np,S))
for(i in 1:nsamples){
postBX[i,,]<- t(mod$sims.list$B[i, , ]%*%t(xdata))
postW[i,,]<- .rMVN(np, postBX[i,,], mod$sims.list$Rho[i,,])
}
predY_mean<-pnorm(apply(postW,2:3, mean))
for(i in 1:S) AUC_j<-auc(roc(predY_mean[,i],factor(datap[1:np,i])))
return(AUC_j)
}
jsdm_AUC<-mapply(jsdm_predict_out,new_sim_data, jsdm_files_list,SIMPLIFY = TRUE)
jsdm_files_list<-list(EnvEvenSp5="model-2019-04-09-19-02-16.rda",EnvEvenSp10="model-2019-04-10-08-26-20.rda",EnvEvenSp20 ="model-2019-04-11-19-06-02.rda",
FacDenseSp5="model-jsdm-2019-05-06-18-41-20.rda",FacDenseSp10="model-2019-04-12-06-59-42.rda",FacDenseSp20="model-2019-04-13-17-22-12.rda",
FacSparseSp5 ="model-2019-04-13-17-51-16.rda",FacSparseSp10="model-2019-04-14-05-17-58.rda",FacSparseSp20 ="model-2019-04-15-15-34-20.rda",
CompDenseSp5 ="model-2019-04-15-16-03-39.rda",CompDenseSp10="model-2019-04-16-03-39-17.rda",CompDenseSp20="model-2019-04-17-14-00-45.rda",
CompSparseSp5="model-2019-04-17-14-30-01.rda",CompSparseSp10 ="model-2019-04-18-01-55-45.rda",CompSparseSp20="model-2019-04-19-12-40-30.rda"
, FacCompDenseSp5="model-2019-04-19-13-08-47.rda",FacCompDenseSp10="model-2019-04-20-00-37-25.rda",FacCompDenseSp20="model-2019-04-21-11-10-34.rda"
, FacCompSparseSp5="model-2019-04-21-11-39-52.rda",FacCompSparseSp10="model-2019-04-21-22-58-58.rda",FacCompSparseSp20="model-2019-04-23-09-42-18.rda")
jsdm_files_list<-list(EnvEvenSp5="model-2019-04-09-19-02-16.rda",EnvEvenSp10="model-2019-04-10-08-26-20.rda",EnvEvenSp20 ="model-2019-04-11-19-06-02.rda",
FacDenseSp5="model-jsdm-2019-05-06-18-41-20.rda",FacDenseSp10="model-2019-04-12-06-59-42.rda",FacDenseSp20="model-2019-04-13-17-22-12.rda",
FacSparseSp5 ="model-2019-04-13-17-51-16.rda",FacSparseSp10="model-2019-04-14-05-17-58.rda",FacSparseSp20 ="model-2019-04-15-15-34-20.rda",
CompDenseSp5 ="model-2019-04-15-16-03-39.rda",CompDenseSp10="model-2019-04-16-03-39-17.rda",CompDenseSp20="model-2019-04-17-14-00-45.rda",
CompSparseSp5="model-2019-04-17-14-30-01.rda",CompSparseSp10 ="model-2019-04-18-01-55-45.rda",CompSparseSp20="model-2019-04-19-12-40-30.rda"
, FacCompDenseSp5="model-2019-04-19-13-08-47.rda",FacCompDenseSp10="model-2019-04-20-00-37-25.rda",FacCompDenseSp20="model-2019-04-21-11-10-34.rda"
, FacCompSparseSp5="model-2019-04-21-11-39-52.rda",FacCompSparseSp10="model-2019-04-21-22-58-58.rda",FacCompSparseSp20="model-2019-04-23-09-42-18.rda")
jsdm_AUC<-mapply(jsdm_predict_out,new_sim_data, jsdm_files_list,SIMPLIFY = TRUE)
new_sim_data$EnvEvenSp5
jsdm_files_list<-list(EnvEvenSp5="model-2019-04-09-19-02-16.rda",EnvEvenSp10="model-2019-04-10-08-26-20.rda",EnvEvenSp20 ="model-2019-04-11-19-06-02.rda",
FacDenseSp5="model-jsdm-2019-05-06-18-41-20.rda",FacDenseSp10="model-2019-04-12-06-59-42.rda",FacDenseSp20="model-2019-04-13-17-22-12.rda",
FacSparseSp5 ="model-2019-04-13-17-51-16.rda",FacSparseSp10="model-2019-04-14-05-17-58.rda",FacSparseSp20 ="model-2019-04-15-15-34-20.rda",
CompDenseSp5 ="model-2019-04-15-16-03-39.rda",CompDenseSp10="model-2019-04-16-03-39-17.rda",CompDenseSp20="model-2019-04-17-14-00-45.rda",
CompSparseSp5="model-2019-04-17-14-30-01.rda",CompSparseSp10 ="model-2019-04-18-01-55-45.rda",CompSparseSp20="model-2019-04-19-12-40-30.rda"
, FacCompDenseSp5="model-2019-04-19-13-08-47.rda",FacCompDenseSp10="model-2019-04-20-00-37-25.rda",FacCompDenseSp20="model-2019-04-21-11-10-34.rda"
, FacCompSparseSp5="model-2019-04-21-11-39-52.rda",FacCompSparseSp10="model-2019-04-21-22-58-58.rda",FacCompSparseSp20="model-2019-04-23-09-42-18.rda")
jsdm_AUC<-mapply(jsdm_predict_out,new_sim_data, jsdm_files_list,SIMPLIFY = TRUE)
jsdm_predict_out(new_sim_data$EnvEvenSp5,jsdm_files_list[1])
jsdm_predict_out(new_sim_data$EnvEvenSp5,jsdm_files_list[[1])
jsdm_predict_out(new_sim_data$EnvEvenSp5,jsdm_files_list[[1]])
jsdm_files_list<-list(EnvEvenSp5="model-2019-04-09-19-02-16.rda",EnvEvenSp10="model-2019-04-10-08-26-20.rda",EnvEvenSp20 ="model-2019-04-11-19-06-02.rda",
FacDenseSp5="model-jsdm-2019-05-06-18-41-20.rda",FacDenseSp10="model-2019-04-12-06-59-42.rda",FacDenseSp20="model-2019-04-13-17-22-12.rda",
FacSparseSp5 ="model-2019-04-13-17-51-16.rda",FacSparseSp10="model-2019-04-14-05-17-58.rda",FacSparseSp20 ="model-2019-04-15-15-34-20.rda",
CompDenseSp5 ="model-2019-04-15-16-03-39.rda",CompDenseSp10="model-2019-04-16-03-39-17.rda",CompDenseSp20="model-2019-04-17-14-00-45.rda",
CompSparseSp5="model-2019-04-17-14-30-01.rda",CompSparseSp10 ="model-2019-04-18-01-55-45.rda",CompSparseSp20="model-2019-04-19-12-40-30.rda"
, FacCompDenseSp5="model-2019-04-19-13-08-47.rda",FacCompDenseSp10="model-2019-04-20-00-37-25.rda",FacCompDenseSp20="model-2019-04-21-11-10-34.rda"
, FacCompSparseSp5="model-2019-04-21-11-39-52.rda",FacCompSparseSp10="model-2019-04-21-22-58-58.rda",FacCompSparseSp20="model-2019-04-23-09-42-18.rda")
type(jsdm_files_list)
typeof(jsdm_files_list)
saveRDS(new_sim_data,"new_sim_data.rds")
