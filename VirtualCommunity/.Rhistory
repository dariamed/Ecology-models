)
diag(species_niche_overlap_asym) <- intra_sp_com
log_p_env <- sapply(
niche_optima, dnorm, mean = env, sd = niche_breadth, log = TRUE
)
log_p_env <- log_p_env  - log(dnorm(0) / 10)
community <- factor(
x      = sample(seq_along(niche_optima), K, replace = TRUE),
levels = seq_len(n_sp)
)
abund <- table(community)
for (j in seq_len(years)) {
for (k in seq_len(K)) {
f_comp <- 1 - colSums(species_fac_sym[community, ]) / K
p_comp <- 1 - colSums(species_niche_overlap_sym[community, ]) / K
if (competition == "asymmetric") {
p_comp <- 1 - colSums(species_niche_overlap_asym[community, ]) / K
}
if (competition == "facilitation") {
p_all <- exp(
beta_env * log_p_env - beta_fac * log(f_comp) +
log(1 + beta_abun * abund)
)
} else {
p_all <- exp(
beta_env * log_p_env + beta_comp * log(p_comp) +
log(1 + beta_abun * abund)
)
}
if (competition == "both") {
p_all <- exp(
beta_env * log_p_env + beta_comp * log(p_comp) - beta_fac *
log(f_comp) + log(1 + beta_abun * abund)
)
}
p_all <- ifelse(is.na(p_all), min(p_all, na.rm = TRUE), p_all)
if (all(is.na(p_all)) || identical(min(p_all), max(p_all))) p_all = NULL
if (any(is.infinite(p_all))) {
community[sample(K, 1)] <- sample(seq_len(n_sp)[p_all == Inf], 1)
} else {
community[sample(K, 1)] <- sample(n_sp, 1, prob = p_all)
}
abund <- table(community)
}
}
as.integer(abund) > 0
}
ans <- mclapply(
env, sim_com, niche_breadth, niche_optima, type, comp_inter, fac_inter,
beta_env, beta_comp, beta_fac, beta_abun, years, K, competition,
intra_sp_com, mc.cores = detectCores()
)
ans <- do.call(rbind, ans)
ans <- cbind(ans, env)
sp_labs <- paste0(
"sp_", gsub(" ", 0, format(seq_along(niche_optima), width = 2))
)
colnames(ans) <- c(sp_labs, "env")
as.data.frame(ans)
}
run_model <- function(data) {
jsdm_jags <- function() {
model.file <- tempfile()
cat(
"model {
for (i in 1:n) {
Z[i, 1:J] ~ dmnorm(Mu[i, ], Tau)
for (j in 1:J) {
Mu[i, j] <- inprod(B_raw[j, ], X[i, ])
Y[i, j] ~ dbern(step(Z[i, j]))
}
}
for (j in 1:J) {
sigma_[j] <- sqrt(Sigma[j, j])
env_sigma_[j] <- sqrt(EnvSigma[j, j])
for (k in 1:K) {
B_raw[j, k] ~ dnorm(mu[k], tau[k])
B[j, k] <- B_raw[j, k] / sigma_[j]
}
for (j_ in 1:J) {
Rho[j, j_] <- Sigma[j, j_] / (sigma_[j] * sigma_[j_])
EnvRho[j, j_] <- EnvSigma[j, j_] / (env_sigma_[j] * env_sigma_[j_])
EnvSigma[j, j_] <- sum(EnvSigma1[, j, j_]) + sum(EnvSigma2[, , j, j_])
for (k in 2:K) {
EnvSigma1[k - 1, j, j_] <- B[j, k] * B[j_, k]
for (k_ in 2:K) {
EnvSigma2[k - 1, k_ - 1, j, j_] <-
B[j, k] * B[j_, k_] * ifelse(k_ != k, covx[k, k_], 0)
}
}
}
}
for (k in 1:K) {
mu[k] ~ dnorm(0, 1)
tau[k] <- pow(sigma[k], -2)
sigma[k] ~ dnorm(0, 1)T(0,)
}
Tau ~ dwish(I, df)
Sigma <- inverse(Tau)
}",
file = model.file
)
model.file
}
inits <- function(data) {
Y <- as.matrix(data$Y)
X <- as.matrix(data$X)[, -1]
Tau <- rWishart(1, data$df, data$I)[, , 1]
Sigma <- solve(Tau)
Z <- rep(0, data$J)
Z <- mvrnorm(1, Z, Sigma)
Z <- replicate(data$n, Z)
Z <- t(Z)
Z <- abs(Z)
Z <- ifelse(Y, Z, -Z)
Sigma <- cov(Z)
B <- sapply(
seq_len(data$J),
function(x) coef(bayesglm(Y[, x] ~ X, family = binomial(link = "probit")))
)
B <- t(B)
B_raw <- B * sqrt(diag(Sigma))
mu <- apply(B_raw, 2, mean)
sigma <- pmin(99, apply(B_raw, 2, sd))
Tau <- solve(Sigma)
list(Tau = Tau, Z = Z, B_raw = B_raw, mu = mu, sigma = sigma)
}
data <- list(
Y = subset(data, select = -env),
X = cbind(1, scale(poly(data$env, 2))),
covx = cov(cbind(1, scale(poly(data$env, 2)))),
K = 3,
J = ncol(data) - 1,
n = nrow(data),
I = diag(ncol(data) - 1),
df = ncol(data)
)
model <- jags(
data,
function() inits(data), c("B", "Rho", "EnvRho"), jsdm_jags(),
n.chains = 15, n.iter = 2e5, n.adapt = 25e5, n.thin = 100,
parallel = TRUE, DIC = FALSE
)
save(
model,
file = paste0("models/model-", format(Sys.time(), "%Y-%m-%d-%H-%M-%S"), ".rda")
)
model
}
predict_y_jsdm <- function(x, ns = 1000) {
data   <- if(x$parallel) x$model[[1]]$data() else x$model$data()
n      <- data$n
nsp    <- data$J
n.samples  <- x$mcmc.info$n.samples
B <- x$sims.list$B
X <- data$X
Y <- data$Y
inprod_mat <- cppFunction(
"NumericMatrix inprod_mat(NumericMatrix X, NumericMatrix B) {
int nX = X.nrow();
int nB = B.nrow();
int nK = X.ncol();
NumericMatrix theta(nX, nB);
for (int i = 0; i < nX; i++) {
for (int j = 0; j < nB; j++) {
theta(i, j) = 0;
for (int k = 0; k < nK; k++) {
theta(i, j) += X(i, k) * B(j, k);
}
}
}
return(theta);
}"
)
vapply(
floor(seq(1, n.samples, length.out = ns)),
function(x) inprod_mat(X, B[x, ,]),
matrix(NA_real_, n, nsp)
)
}
prob_cooccur_es <- function(Y) {
K <- ncol(Y)
ans <- matrix(0, K, K)
for (k in 1:K) {
for (kk in 1:K) {
N1 <- sum(Y[, k])
N2 <- sum(Y[, kk])
N <- nrow(Y)
j <- max(0, N1 + N2 - N):min(N1, N2)
p <- vector("numeric", length(j))
for (i in seq_along(j)) {
p[i] <- (
choose(N, j[i]) * choose(N - j[i], N2 - j[i]) *
choose(N - N2, N1 - j[i])
) / (
choose(N, N2) * choose(N, N1)
)
}
ans[k, kk] <- (sum(Y[, k] + Y[, kk] == 2) - sum(p * j)) / N
}
}
ans
}
models <- lapply(sim_data, run_model)
warnings()
models <- lapply(sim_data, run_model)
warnings()
models <- lapply(sim_data, run_model)
sim_data
sim_data[1]
m<-run_model(sim_data[1])
sim_data[1]
sim_data[1]$Env
data<-sim_data[1]
m<- run_model(sim_data[1])
data[,-env]
x<- as.matrix(data$X)[,-1]
data
subset(data, select = -env)
data
data<-as.data.frame(sim_data[1])
subset(data, select = -env)
data
sim_names
sim_data
sim_data[1][1]
sim_data$EnvEvenSp5[,-"env"]
sim_data$EnvEvenSp5[,-env]
dat<- sim_data$EnvEvenSp5
dat$env
subset(dat, select = -env)
data<-  sim_data$EnvEvenSp5
m<- run_model(data)
data
warnings()
Y
X
Y = subset(data, select = -env)
Y
X = cbind(1, scale(poly(data$env, 2)))
X
covx = cov(cbind(1, scale(poly(data$env, 2))))
covx
J
n
ncol(data)
nrow(data)
diag(ncol(data) - 1)
data <- list(
Y = subset(data, select = -env),
X = cbind(1, scale(poly(data$env, 2))),
covx = cov(cbind(1, scale(poly(data$env, 2)))),
K = 3,
J = ncol(data) - 1,
n = nrow(data),
I = diag(ncol(data) - 1),
df = ncol(data)
)
data
J
step(5)
?step
dbern(step(5))
?dbern
save(
model,
file = paste0("models/model-", format(Sys.time(), "%Y-%m-%d-%H-%M-%S"), ".rda")
)
run_model <- function(data) {
jsdm_jags <- function() {
model.file <- tempfile()
cat(
"model {
for (i in 1:n) {
Z[i, 1:J] ~ dmnorm(Mu[i, ], Tau)
for (j in 1:J) {
Mu[i, j] <- inprod(B_raw[j, ], X[i, ])
Y[i, j] ~ dbern(step(Z[i, j]))
}
}
for (j in 1:J) {
sigma_[j] <- sqrt(Sigma[j, j])
env_sigma_[j] <- sqrt(EnvSigma[j, j])
for (k in 1:K) {
B_raw[j, k] ~ dnorm(mu[k], tau[k])
B[j, k] <- B_raw[j, k] / sigma_[j]
}
for (j_ in 1:J) {
Rho[j, j_] <- Sigma[j, j_] / (sigma_[j] * sigma_[j_])
EnvRho[j, j_] <- EnvSigma[j, j_] / (env_sigma_[j] * env_sigma_[j_])
EnvSigma[j, j_] <- sum(EnvSigma1[, j, j_]) + sum(EnvSigma2[, , j, j_])
for (k in 2:K) {
EnvSigma1[k - 1, j, j_] <- B[j, k] * B[j_, k]
for (k_ in 2:K) {
EnvSigma2[k - 1, k_ - 1, j, j_] <-
B[j, k] * B[j_, k_] * ifelse(k_ != k, covx[k, k_], 0)
}
}
}
}
for (k in 1:K) {
mu[k] ~ dnorm(0, 1)
tau[k] <- pow(sigma[k], -2)
sigma[k] ~ dnorm(0, 1)T(0,)
}
Tau ~ dwish(I, df)
Sigma <- inverse(Tau)
}",
file = model.file
)
model.file
}
inits <- function(data) {
Y <- as.matrix(data$Y)
X <- as.matrix(data$X)[, -1]
Tau <- rWishart(1, data$df, data$I)[, , 1]
Sigma <- solve(Tau)
Z <- rep(0, data$J)
Z <- mvrnorm(1, Z, Sigma)
Z <- replicate(data$n, Z)
Z <- t(Z)
Z <- abs(Z)
Z <- ifelse(Y, Z, -Z)
Sigma <- cov(Z)
B <- sapply(
seq_len(data$J),
function(x) coef(bayesglm(Y[, x] ~ X, family = binomial(link = "probit")))
)
B <- t(B)
B_raw <- B * sqrt(diag(Sigma))
mu <- apply(B_raw, 2, mean)
sigma <- pmin(99, apply(B_raw, 2, sd))
Tau <- solve(Sigma)
list(Tau = Tau, Z = Z, B_raw = B_raw, mu = mu, sigma = sigma)
}
data <- list(
Y = subset(data, select = -env),
X = cbind(1, scale(poly(data$env, 2))),
covx = cov(cbind(1, scale(poly(data$env, 2)))),
K = 3,
J = ncol(data) - 1,
n = nrow(data),
I = diag(ncol(data) - 1),
df = ncol(data)
)
model <- jags(
data,
function() inits(data), c("B", "Rho", "EnvRho"), jsdm_jags(),
n.chains = 15, n.iter = 2e5, n.adapt = 25e5, n.thin = 100,
parallel = TRUE, DIC = FALSE
)
save(
model,
file = paste0("models/model-", format(Sys.time(), "%Y-%m-%d-%H-%M-%S"), ".rda")
)
model
}
data<-  sim_data$EnvEvenSp5
m<- run_model(data)
warnings()
data <- list(
Y = subset(data, select = -env),
X = cbind(1, scale(poly(data$env, 2))),
covx = cov(cbind(1, scale(poly(data$env, 2)))),
K = 3,
J = ncol(data) - 1,
n = nrow(data),
I = diag(ncol(data) - 1),
df = ncol(data)
)
data
Y <- as.matrix(data$Y)
X <- as.matrix(data$X)[, -1]
Y
X
Tau <- rWishart(1, data$df, data$I)[, , 1]
Tau
Sigma <- solve(Tau)
Sigma
Z <- rep(0, data$J)
Z
Z <- mvrnorm(1, Z, Sigma)
Z
Z <- replicate(data$n, Z)
Z
Z <- t(Z)
Z
Z <- abs(Z)
Z
Z <- ifelse(Y, Z, -Z)
Z
?ifelse
x <- c(6:-4)
sqrt(x)  #- gives warning
sqrt(ifelse(x >= 0, x, NA))  # no warning
Z <- rep(0, data$J)
Z <- mvrnorm(1, Z, Sigma)
Z <- replicate(data$n, Z)
Z <- t(Z)
Z <- abs(Z)
Z[1]
Z
Z[1,]
Y[1]
Y[1,]
Z <- ifelse(Y, Z, -Z)
Z[1,]
Sigma <- cov(Z)
B <- sapply(
seq_len(data$J),
function(x) coef(bayesglm(Y[, x] ~ X, family = binomial(link = "probit")))
)
data$J
b<-bayesglm(Y[, 1] ~ X, family = binomial(link = "probit"))
b
b<-bayesglm(Y[, 2] ~ X, family = binomial(link = "probit"))
b<-bayesglm(Y[, 3] ~ X, family = binomial(link = "probit"))
b<-bayesglm(Y[, 4] ~ X, family = binomial(link = "probit"))
b
b<-bayesglm(Y[, 5] ~ X, family = binomial(link = "probit"))
b
b<-bayesglm(Y[, 2] ~ X, family = binomial(link = "probit"))
Y[,2]
Y[1,]
b<-bayesglm(Y[, 2] ~ X, family = binomial(link = "probit"))
Y[,2]
X
data$J
Beta <- t(sapply(seq_len(data$J),
function(x) {unname(coef(glm(Y[, x] ~ X[, -1],
family=binomial(link=probit))))}))
Beta
X
Beta <- t(sapply(seq_len(data$J),
function(x) {unname(coef(glm(Y[, x] ~ X,
family=binomial(link=probit))))}))
B <- sapply(
seq_len(data$J),
function(x) coef(bayesglm(Y[, x] ~ X[,-1], family = binomial(link = "probit")))
)
X
B <- sapply(
seq_len(data$J),
function(x) coef(bayesglm(Y[, x] ~ X[,-1], family = binomial(link = "probit")))
)
B
B <- sapply(
seq_len(data$J),
function(x) coef(bayesglm(Y[, x] ~ X, family = binomial(link = "probit")))
)
Y <- as.matrix(data$Y)
X <- as.matrix(data$X)[, -1]
Tau <- rWishart(1, data$df, data$I)[, , 1]
Sigma <- solve(Tau)
Z <- rep(0, data$J)
Z <- mvrnorm(1, Z, Sigma)
Z <- replicate(data$n, Z)
Z <- t(Z)
Z <- abs(Z)
Z <- ifelse(Y, Z, -Z)
Sigma <- cov(Z)
B <- sapply(
seq_len(data$J),
function(x) coef(bayesglm(Y[, x] ~ X, family = binomial(link = "probit")))
)
sim_data =
list(
niche_optima = unlist(replicate(7, lapply(c(5, 10, 20), function(x) seq(2, 98, length.out = x)), FALSE), FALSE),
type         = list("original", "manual")[c(rep(1, 3), rep(2, 18))],
comp_inter   = comp_inter,
fac_inter    = fac_inter,
beta_comp    = rep(list(0, 10, 4), each = 7),
beta_fac     = rep(list(0, 3, 3, 0, 0, 1, 2), each = 3),
K            = rep(list(10, 20, 40), 7),
competition  = list("symmetric", "both")[c(rep(1, 3), rep(2, 18))],
intra_sp_com = rep(list(1), 21)
)%>%
pmap(simulate_community) %>%
#map(abund2occur) %>%
set_names(sim_names)
saveRDS(sim_data, file = "simdata.rds")
sim_data<-readRDS("simdata.rds")
data<-  sim_data$EnvEvenSp5
m<- run_model(data)
data <- list(
Y = subset(data, select = -env),
X = cbind(1, scale(poly(data$env, 2))),
covx = cov(cbind(1, scale(poly(data$env, 2)))),
K = 3,
J = ncol(data) - 1,
n = nrow(data),
I = diag(ncol(data) - 1),
df = ncol(data)
)
Y <- as.matrix(data$Y)
X <- as.matrix(data$X)[, -1]
Tau <- rWishart(1, data$df, data$I)[, , 1]
Sigma <- solve(Tau)
Z <- rep(0, data$J)
Z <- mvrnorm(1, Z, Sigma)
Z <- replicate(data$n, Z)
Z <- t(Z)
Z <- abs(Z)
Z <- ifelse(Y, Z, -Z)
Sigma <- cov(Z)
B <- sapply(
seq_len(data$J),
function(x) coef(bayesglm(Y[, x] ~ X, family = binomial(link = "probit")))
)
Y[1,]
X[1,]
X[1,]
